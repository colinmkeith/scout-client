#!/usr/bin/env ruby

$VERBOSE = true # -w
$KCODE   = "u"  # -Ku

$LOAD_PATH << File.join(File.dirname(__FILE__), *%w[.. lib])
require "scout"
require "optparse"
require "logger"
require "fileutils"

CONFIG_DIR = File.join(File.expand_path("~"), ".scout")
USER       = ENV["USER"] || ENV["USERNAME"] || "root"

options = { :server  => "https://scoutapp.com/",
            :history => File.join(CONFIG_DIR ,"client_history.yaml"),
            :verbose => false,
            :level   => "info" }

ARGV.options do |opts|
  opts.banner = "Usage:  #{File.basename($PROGRAM_NAME)} [OPTIONS] CLIENT_KEY"
  
  opts.separator ""
  opts.separator "CLIENT_KEY is the indentification key assigned to this " +
                 "client by the server."
  opts.separator ""
  opts.separator "Note: This client is meant to be installed and invoked " +
                 "through cron or any other scheduler."
  opts.separator ""
  opts.separator "Specific Options:"
  
  opts.on( "-s", "--server SERVER", String,
           "The URL for the server this client reports to." ) do |url|
    options[:server] = url
  end
  opts.on( "-d", "--data DATA", String,
           "The data file used to track the history of executions." ) do |file|
    options[:history] = file
  end
  opts.on( "-l", "--level LEVEL", Logger::SEV_LABEL.map { |l| l.downcase },
           "The level of logging to report." ) do |level|
    options[:level] = level
  end
  
  opts.separator "Common Options:"
  
  opts.on( "-h", "--help",
           "Show this message." ) do
    puts opts
    exit
  end
  opts.on( "-v", "--[no-]verbose",
           "Turn on logging to STDOUT" ) do |bool|
    options[:verbose] = bool
  end
  
  begin
    opts.parse!
    options[:client_key] = ARGV.shift if ARGV.size == 1
  rescue
    puts opts
    exit
  end
end

log                 = Logger.new($stdout)
log.datetime_format = "%Y-%m-%d %H:%M "
log.level           = Logger.const_get(options[:level].upcase) \
                        rescue Logger::INFO

FileUtils.mkdir_p(File.dirname(options[:history])) # ensure dir exists

if options[:client_key].nil? and $stdin.tty?  # install wizard
  puts <<-END_INTRO.gsub(/^ {2}/, "")
  == Scout Installation Wizard ==
  
  You need the Client Key displayed in the Client Settings
  tab. It looks like:
  
    6ecad322-0d17-4cb8-9b2c-a12c4541853f
  
  Enter the Client Key:
  END_INTRO
  options[:client_key] = gets.to_s.chomp!
  
  # puts "Attempting to contact the server..."
  begin
    Scout::Server.new( options[:server],
                       options[:client_key],
                       options[:history],
                       options[:verbose] ? log : nil ) { |server| server.test }
  
    puts <<-END_SUCCESS.gsub(/^ {4}/, "")
    
    Success!
  
    ******* NOW, INSTALL IN CRONTAB *******
  
    */10 * * * *  #{USER} #{File.expand_path($PROGRAM_NAME)} #{options[:client_key]}
    
    ******* END CRONTAB SAMPLE *******
    
    For help setting up Scout with crontab, please visit:

      http://scoutapp.com/help#cron
    
    END_SUCCESS
  rescue SystemExit
    puts <<-END_ERROR.gsub(/^ {4}/, "")
    
    Could not contact server. The client key may be incorrect. For more help, please visit:
    
    http://scoutapp.com/help
    
    END_ERROR
  end
else                                          # normal run
  Scout::Server.new( options[:server],
                     options[:client_key],
                     options[:history],
                     options[:verbose] ? log : nil ) do |server|
    server.run_plugins_by_plan
  end
end
