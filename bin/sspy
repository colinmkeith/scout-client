#!/usr/bin/env ruby -wKU

$LOAD_PATH << File.join(File.dirname(__FILE__), *%w[.. lib])
require "sspy"

require "optparse"
require "logger"

options = { :server  => "http://spy.highgroove.com/",
            :history => "client_history.yaml",
            :verbose => false,
            :level   => "info" }

ARGV.options do |opts|
  opts.banner = "Usage:  #{File.basename($PROGRAM_NAME)} [OPTIONS] CLIENT_KEY"
  
  opts.separator ""
  opts.separator "CLIENT_KEY is the indentification key assigned to this " +
                 "client by the server."
  opts.separator ""
  opts.separator "Specific Options:"
  
  opts.on( "-s", "--server SERVER", String,
           "The URL for the server this client reports to." ) do |url|
    options[:server] = url
  end
  opts.on( "-h", "--history", String,
           "The file used to track the history of executions." ) do |path|
    options[:history] = path
  end
  opts.on( "-l", "--level LEVEL", Logger::SEV_LABEL.map { |l| l.downcase },
           "The level of logging to report." ) do |level|
    options[:level] = level
  end
  
  opts.separator "Common Options:"
  
  opts.on( "-h", "--help",
           "Show this message." ) do
    puts opts
    exit
  end
  opts.on( "-v", "--[no-]verbose",
           "Turn on logging to STDOUT" ) do |bool|
    options[:verbose] = bool
  end
  
  begin
    opts.parse!
    raise "Missing CLIENT_KEY" unless ARGV.size == 1
  rescue
    puts opts
    exit
  end
end

if options[:verbose]
  log = Logger.new($stdout)
  log.datetime_format = "%Y-%m-%d %H:%M "
  log.level = Logger.const_get(options[:level].upcase) rescue Logger::INFO
else
  log = nil
end

SSpy::Server.new( options[:server],
                  ARGV.shift,
                  options[:history],
                  log ) do |server|
  server.run_plugins_by_plan
end
